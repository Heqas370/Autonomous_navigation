<launch>

<include file="$(find rosserial_server)/launch/socket.launch" />

  <!-- Transformation Configuration ... Setting Up the Relationships Between Coordinate Frames --> 
  <node pkg="tf" type="static_transform_publisher" name="base_link_to_laser" args="0.06 0 0.08 0 0 0 base_link laser 30" />
  <node pkg="tf" type="static_transform_publisher" name="imu_broadcaster" args="0 -0.06 0.02 0 0 0 base_link imu 30" />
  <node pkg="tf" type="static_transform_publisher" name="base_link_broadcaster" args="0 0 0.09 0 0 0 base_footprint base_link 30" />
  <!-- odom to base_footprint transform will be provided by the robot_pose_ekf node -->
  <!-- map to odom will be provided by the AMCL -->
   <node pkg="tf" type="static_transform_publisher" name="map_to_odom" args="0 0 0 0 0 0 map odom 30" />

  <!-- Wheel Encoder Tick Publisher and Base Controller Using Arduino -->  
  <!-- motor_controller_diff_drive_2.ino is the Arduino sketch -->
  <!-- Subscribe: /cmd_vel -->
  <!-- Publish: /right_ticks, /left_ticks -->
  

  <!-- Wheel Odometry Publisher -->
  <!-- Subscribe: /right_ticks, /left_ticks, /initial_2d -->
  <!-- Publish: /odom_data_euler, /odom_data_quat -->
  <node pkg="test_bachelor" type="wheel_odometry3" name="Encoder_odometry">
  </node> 
	
  <!-- IMU Data Publisher Using the BNO055 IMU Sensor -->
  <!-- Publish: /imu/data -->
  <node ns="imu" name="imu_node" pkg="imu_bno055" type="bno055_i2c_node" respawn="true" respawn_delay="2">
    <param name="device" type="string" value="/dev/i2c-1"/>
    <param name="address" type="int" value="40"/> <!-- 0x28 == 40 is the default for BNO055 -->
    <param name="frame_id" type="string" value="imu"/>
  </node>
	
  <!-- Extended Kalman Filter from robot_pose_ekf Node-->
  <!-- Subscribe: /odom, /imu_data, /vo -->
  <!-- Publish: /robot_pose_ekf/odom_combined -->
  <remap from="odom" to="odom_data_quat" />
  <remap from="imu_data" to="imu/data" />
  <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
    <param name="output_frame" value="odom"/>
    <param name="base_footprint_frame" value="base_footprint"/>
    <param name="freq" value="30.0"/>
    <param name="sensor_timeout" value="1.0"/>
    <param name="odom_used" value="true"/>
    <param name="imu_used" value="true"/>
    <param name="vo_used" value="false"/>
    <param name="gps_used" value="false"/>
    <param name="debug" value="false"/>
    <param name="self_diagnose" value="false"/>
  </node>
	
  <!-- Initial Pose and Goal Publisher -->
  <!-- Publish: /initialpose, /move_base_simple/goal -->
  <node pkg="rviz" type="rviz" name="rviz" args= "-d $(find navstack_pub)/rviz/rviz_navigation_stack.rviz" >
  </node> 

  <!-- Subscribe: /initialpose, /move_base_simple/goal -->
  <!-- Publish: /initial_2d, /goal_2d --> 
  <node pkg="test_bachelor" type="rviz_23d" name="rviz_click_to_2d">
  </node>   

  <!-- Lidar Data Publisher Using RPLIDAR from Slamtec -->
  <!-- Used for obstacle avoidance and can be used for mapping --> 
  <!-- Publish: /scan -->
  <node name="rplidarNode"          pkg="rplidar_ros"  type="rplidarNode" output="screen">
    <param name="serial_port"         type="string" value="/dev/ttyRPLIDAR0"/>
    <param name="serial_baudrate"     type="int"    value="115200"/><!--A1/A2 -->
    <!--param name="serial_baudrate"  type="int"    value="256000"--><!--A3 -->
    <param name="frame_id"            type="string" value="laser"/>
    <param name="inverted"            type="bool"   value="false"/>
    <param name="angle_compensate"    type="bool"   value="true"/>
  </node>  

  <!-- Map File -->
  <arg name="map_file" default="$(find test_bachelor)/maps/map-804.yaml"/>
	
  <!-- Map Server -->
  <!-- Publish: /map, /map_metadata -->
  <node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)" />
	
  <!-- Add AMCL example for differential drive robots for Localization -->
  <!-- Subscribe: /scan, /tf, /initialpose, /map -->
  <!-- Publish: /amcl_pose, /particlecloud, /tf -->
  <!-- <include file="$(find amcl)/examples/amcl_diff.launch"/> -->
<node pkg="amcl" type="amcl" name="amcl" output="screen">
        <param name="tf_broadcast" value="true" />
        <param name="initial_cov_aa" value="0.785375" /> <!-- (double, default: (π/12)*(π/12) radian)-->

        <param name="base_frame_id" value="base_footprint" /> <!-- Change this if you want to change your base frame id. -->
        <param name="odom_frame_id" value="odom" />

        <param name="gui_publish_rate" value="10.0" /> <!-- Maximum rate (Hz) at which scans and paths are published for visualization, -1.0 to disable. -->
        <param name="kld_err" value="0.05" />
        <param name="kld_z" value="0.99" />
        <param name="laser_lambda_short" value="0.1" />
        <param name="laser_likelihood_max_dist" value="2.0" />
        <param name="laser_max_beams" value="30" />
        <param name="laser_model_type" value="likelihood_field" />
        <param name="laser_sigma_hit" value="0.2" />
        <param name="laser_z_hit" value="0.5" />
        <param name="laser_z_short" value="0.05" />
        <param name="laser_z_max" value="0.05" />
        <param name="laser_z_rand" value="0.5" />
        <param name="max_particles" value="2000" />
        <param name="min_particles" value="500" />
        <param name="odom_alpha1" value="0.2" /> <!-- Specifies the expected noise in odometry's rotation estimate from the rotational component of the robot's motion. -->
        <param name="odom_alpha2" value="0.2" /> <!-- Specifies the expected noise in odometry's rotation estimate from translational component of the robot's motion. -->
        <param name="odom_alpha3" value="0.8" /> <!-- Specifies the expected noise in odometry's translation estimate from the translational component of the robot's motion. -->
        <param name="odom_alpha4" value="0.4" /> <!-- Specifies the expected noise in odometry's translation estimate from the rotational component of the robot's motion. -->
        <param name="odom_alpha5" value="0.1" /> <!-- Specifies the expected noise in odometry's translation estimate from the rotational component of the robot's motion. -->
        <param name="odom_model_type" value="diff" />
        <param name="recovery_alpha_slow" value="0.0" /> <!-- Exponential decay rate for the slow average weight filter, used in deciding when to recover by adding random poses. -->
        <param name="recovery_alpha_fast" value="0.0" /> <!-- Exponential decay rate for the fast average weight filter, used in deciding when to recover by adding random poses. -->
        <param name="resample_interval" value="1" /> <!-- Number of filter updates required before resampling. -->
        <param name="transform_tolerance" value="0.2" />
        <param name="update_min_a" value="0.2" /> <!-- Rotational movement required before performing a filter update. 0.1 represents 5.7 degrees  -->
        <param name="update_min_d" value="0.2" /> <!-- Translational movement required before performing a filter update. -->
    </node>
	
  <!-- Move Base Node -->
  <!-- Subscribe: /move_base_simple/goal -->
  <!-- Publish: /cmd_vel -->
  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <rosparam file="$(find test_bachelor)/param/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find test_bachelor)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find test_bachelor)/param/local_costmap_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find test_bachelor)/param/global_costmap_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find test_bachelor)/param/teb_local_planner_params.yaml" command="load" />

  </node>

</launch>
